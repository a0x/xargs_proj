#!/usr/bin/env ruby

require 'optparse'

options = {}
opt_parser = OptionParser.new do |opt|
  opt.on("-n", "--max-args=max-args", "max args") do |max_args|
    # Use at most max-args arguments per command line.
    options[:max_args] = max_args
  end

  opt.on("-P", "--max-procs=max-procs", "max procs") do |max_procs|
    # Run up to max-procs processes at a time; the default is 1.  If max-procs is 0, xargs will run as many
    # processes as possible at a time.  Use the -n option or the -L option with -P; otherwise  chances  are
    # that  only  one exec will be done.  While xargs is running, you can send its process a SIGUSR1 signal
    # to increase the number of commands to run simultaneously, or a SIGUSR2 to decrease the  number.   You
    # cannot  increase  it  above an implementation-defined limit (which is shown with --show-limits).  You
    # cannot decrease it below 1.  xargs never terminates its commands; when asked to decrease,  it  merely
    # waits for more than one existing command to terminate before starting another.
    options[:max_procs] = max_procs
  end

  opt.on("-d", "--dev", "dev mode") do
    options[:dev] = true
  end
end

# Rescue other options from opt_parser, so that other commands with its original options are allowed.
leagal_options = ['-n', '-P', '--max-args', '--max-procs', '-d', '--dev']
raw_options = ARGV.dup
remaining = []
while !raw_options.empty?
  begin
    head = raw_options.shift
    if leagal_options.include? head
      remaining.concat(opt_parser.parse([head, raw_options.shift]))
    else
      remaining.concat(opt_parser.parse([head]))
    end
  rescue OptionParser::InvalidOption
    remaining << head
    retry
  end
end

# opt_parser.parse!

# Read from STDIN, store the original STDIN
raw = STDIN.read

# Now we shall split STDIN into pieces.
process_by_new_line = raw.split("\n")
process_by_space    = raw.split(" ")
process_by_tab      = raw.split("\t")

# And find out which is the right one for executing.
pre_process_resource = ''
if process_by_new_line.length > 1
  pre_process_resource = process_by_new_line
elsif process_by_space.length > 1
  pre_process_resource = process_by_space
elsif process_by_tab.length > 1
  pre_process_resource = process_by_tab
else
  pre_process_resource = raw
end

if pre_process_resource.empty?
  STDERR.puts "Error with STDIN"
end

# Build command from the remaining, with the command itself and options
commands = remaining.join(' ')

if options[:dev]
  puts "OPTIONS: \n#{options}\n
RAW: \n#{raw}\n
LENGTH \nraw: #{raw.length} | process_by_new_line: #{process_by_new_line.length} | process_by_space: #{process_by_space.length} | process_by_tab: #{process_by_tab.length}\n
PRE PRECESS RESOURCE: \n#{pre_process_resource}\n
COMMANDS: \n#{remaining}\n"

  STDOUT.puts "\nEXECUTABLE COMMAND:\n#{commands} #{pre_process_resource.join(' ')}"
  STDOUT.puts "\nRESULT:\n"
end

if options[:max_args]
  pre_process_resource.each_slice(options[:max_args].to_i) do |resource|
    STDOUT.puts `#{commands} #{resource.join(' ')}`
  end
else
  STDOUT.puts `#{commands} #{pre_process_resource.join(' ')}`
end